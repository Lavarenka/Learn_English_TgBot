import telebot
from telebot import types
import random
from key import BOT_TOKEN
import questions

quiz_questions = questions.parse_questions_from_file('base.txt')

bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_games = {}
user_stats = {}
user_settings = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    btn2 = types.KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn3 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn1, btn2, btn3)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def create_settings_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤')
    btn2 = types.KeyboardButton('üìù –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn3 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def create_questions_count_menu():
    markup = types.ReplyKeyboardMarkup(row_width=5, resize_keyboard=True)
    buttons = []
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    counts = [5, 10, 15, 20, 25, 30, 40, 50]
    for count in counts:
        buttons.append(types.KeyboardButton(f'{count} –≤–æ–ø—Ä–æ—Å–æ–≤'))

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(buttons), 4):
        markup.add(*buttons[i:i + 4])

    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
def create_game_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞')
    btn2 = types.KeyboardButton('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn3 = types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É')
    markup.add(btn1, btn2, btn3)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_questions_count(user_id):
    if user_id not in user_settings:
        user_settings[user_id] = {'questions_count': 10}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –≤–æ–ø—Ä–æ—Å–æ–≤
    return user_settings[user_id]['questions_count']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def set_user_questions_count(user_id, count):
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['questions_count'] = count


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
def start_new_game(user_id):
    questions_count = get_user_questions_count(user_id)
    available_questions = min(questions_count, len(quiz_questions))

    user_games[user_id] = {
        'score': 0,
        'current_question': 0,
        'questions': random.sample(quiz_questions, available_questions),
        'in_game': True,
        'hint_used': False,
        'questions_count': available_questions
    }
    return send_question(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
def send_question(user_id):
    game_data = user_games[user_id]
    question_data = game_data['questions'][game_data['current_question']]

    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {game_data['current_question'] + 1} –∏–∑ {game_data['questions_count']}:\n\n{question_data['question']}"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
    # if len(question_data['correct']) > 1:
    #     question_text += f"\n\nüí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question_data['correct'])}"

    if game_data['hint_used']:
        question_text += f"\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"

    return question_text


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
def check_answer(user_answer, correct_answers):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ç–∏–≤ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    """
    user_clean = user_answer.lower().strip()

    for correct in correct_answers:
        correct_clean = correct.lower().strip()

        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if user_clean == correct_clean:
            return True

        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if correct_clean in user_clean or user_clean in correct_clean:
            return True

    return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
def format_correct_answers(correct_answers):
    if len(correct_answers) == 1:
        return correct_answers[0]
    else:
        return " –∏–ª–∏ ".join(correct_answers)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_stats(user_id, score, total_questions):
    if user_id not in user_stats:
        user_stats[user_id] = {
            'games_played': 0,
            'total_correct': 0,
            'total_questions': 0,
            'best_score': 0
        }

    stats = user_stats[user_id]
    stats['games_played'] += 1
    stats['total_correct'] += score
    stats['total_questions'] += total_questions

    if score > stats['best_score']:
        stats['best_score'] = score


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_text(user_id):
    if user_id not in user_stats:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    stats = user_stats[user_id]

    if stats['games_played'] == 0:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    accuracy = (stats['total_correct'] / stats['total_questions']) * 100 if stats['total_questions'] > 0 else 0
    questions_count = get_user_questions_count(user_id)

    stats_text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {stats['games_played']}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_correct']} –∏–∑ {stats['total_questions']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}/{questions_count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
üî¢ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}"""

    return stats_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings_text(user_id):
    questions_count = get_user_questions_count(user_id)
    total_available = len(quiz_questions)

    settings_text = f"""‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏–≥—Ä–µ: {questions_count}
üìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: {total_available}

üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {min(50, total_available)}"""

    return settings_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
def finish_game(user_id, message_chat_id):
    if user_id in user_games:
        game_data = user_games[user_id]
        score = game_data['score']
        total = game_data['questions_count']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞
        if game_data['current_question'] > 0:
            update_stats(user_id, score, total)

        if score == total:
            result_text = f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ {total} –≤–æ–ø—Ä–æ—Å–æ–≤! –¢—ã –≥–µ–Ω–∏–π! üåü"
        elif score >= total * 0.8:
            result_text = f"üëç –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
        elif score >= total * 0.6:
            result_text = f"üëå –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
        elif score >= total * 0.4:
            result_text = f"üòä –ù–µ–ø–ª–æ—Ö–æ! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
        else:
            result_text = f"üìö –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"

        bot.send_message(message_chat_id, result_text, reply_markup=create_main_menu())
        del user_games[user_id]
    else:
        bot.send_message(message_chat_id, "üëã –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'",
                         reply_markup=create_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    total_questions = len(quiz_questions)
    user_questions_count = get_user_questions_count(message.from_user.id)

    welcome_text = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É!

–í –±–∞–∑–µ: {total_questions} —Å–ª–æ–≤
–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏–≥—Ä–µ: {user_questions_count}

üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
‚è≠Ô∏è –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å
‚ùå –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π! üçÄ"""
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /game
@bot.message_handler(commands=['game'])
def start_game_command(message):
    user_id = message.from_user.id
    start_new_game(user_id)
    question_text = send_question(user_id)
    questions_count = get_user_questions_count(user_id)

    bot.send_message(message.chat.id,
                     f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n–í–≤–æ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º:",
                     reply_markup=create_game_keyboard())
    bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def show_stats_command(message):
    user_id = message.from_user.id
    stats_text = get_stats_text(user_id)
    bot.send_message(message.chat.id, stats_text, reply_markup=create_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@bot.message_handler(commands=['settings'])
def show_settings_command(message):
    user_id = message.from_user.id
    settings_text = get_settings_text(user_id)
    bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_game(message):
    user_id = message.from_user.id

    if message.text == 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
        start_new_game(user_id)
        question_text = send_question(user_id)
        questions_count = get_user_questions_count(user_id)

        bot.send_message(message.chat.id,
                         f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n–í–≤–æ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º:",
                         reply_markup=create_game_keyboard())
        bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())

    elif message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats_text = get_stats_text(user_id)
        bot.send_message(message.chat.id, stats_text, reply_markup=create_main_menu())

    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings_text = get_settings_text(user_id)
        bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())

    elif message.text == 'üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤':
        total_available = len(quiz_questions)
        max_questions = min(50, total_available)
        text = f"üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã:\n\n–î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: {total_available}\n–ú–∞–∫—Å–∏–º—É–º: {max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤"
        bot.send_message(message.chat.id, text, reply_markup=create_questions_count_menu())

    elif message.text == 'üìù –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings_text = get_settings_text(user_id)
        bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

    elif message.text.endswith('–≤–æ–ø—Ä–æ—Å–æ–≤') and message.text.split()[0].isdigit():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        try:
            count = int(message.text.split()[0])
            total_available = len(quiz_questions)
            max_questions = min(50, total_available)

            if count < 5:
                bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 5",
                                 reply_markup=create_questions_count_menu())
            elif count > max_questions:
                bot.send_message(message.chat.id,
                                 f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {max_questions}\n–í –±–∞–∑–µ —Ç–æ–ª—å–∫–æ {total_available} —Å–ª–æ–≤",
                                 reply_markup=create_questions_count_menu())
            else:
                set_user_questions_count(user_id, count)
                bot.send_message(message.chat.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}",
                                 reply_markup=create_settings_menu())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤",
                             reply_markup=create_settings_menu())

    elif message.text == 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            if not game_data['hint_used']:
                game_data['hint_used'] = True
                question_data = game_data['questions'][game_data['current_question']]
                hint_text = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"
                bot.send_message(message.chat.id, hint_text, reply_markup=create_game_keyboard())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!",
                                 reply_markup=create_game_keyboard())
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É!", reply_markup=create_main_menu())

    elif message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            question_data = game_data['questions'][game_data['current_question']]
            correct_text = format_correct_answers(question_data['correct'])

            bot.send_message(message.chat.id, f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}",
                             reply_markup=create_game_keyboard())

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            game_data['current_question'] += 1
            game_data['hint_used'] = False

            if game_data['current_question'] < game_data['questions_count']:
                question_text = send_question(user_id)
                bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
            else:
                # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
                finish_game(user_id, message.chat.id)

    elif message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É':
        if user_id in user_games and user_games[user_id]['in_game']:
            bot.send_message(message.chat.id, "üõë –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ",
                             reply_markup=create_main_menu())
            finish_game(user_id, message.chat.id)
        else:
            bot.send_message(message.chat.id, "üëã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'",
                             reply_markup=create_main_menu())

    elif user_id in user_games and user_games[user_id]['in_game']:
        game_data = user_games[user_id]
        current_question = game_data['questions'][game_data['current_question']]

        if check_answer(message.text, current_question['correct']):
            game_data['score'] += 1
            bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", reply_markup=create_game_keyboard())
        else:
            correct_text = format_correct_answers(current_question['correct'])
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}",
                             reply_markup=create_game_keyboard())

        game_data['current_question'] += 1
        game_data['hint_used'] = False

        if game_data['current_question'] < game_data['questions_count']:
            question_text = send_question(user_id)
            bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
        else:
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
            finish_game(user_id, message.chat.id)

    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_main_menu())


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(quiz_questions)}")
    bot.polling(none_stop=True)