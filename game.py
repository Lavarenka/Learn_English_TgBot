from key import BOT_TOKEN
import telebot
from telebot import types
import random

BOT_TOKEN = BOT_TOKEN
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
quiz_questions = [
    {
        "question": "You",
        "correct": "—Ç—ã",
        "hint": "."
    },
    {
        "question": "he",
        "correct": "–æ–Ω",
        "hint": "."
    },
    {
        "question": "she",
        "correct": "–æ–Ω–∞",
        "hint": "."
    },
    {
        "question": "it",
        "correct": "–æ–Ω–æ",
        "hint": "."
    },
    {
        "question": "we",
        "correct": "–º—ã",
        "hint": "."
    },
    {
        "question": "they",
        "correct": "–æ–Ω–∏",
        "hint": "."
    },
    {
        "question": "to be",
        "correct": "–±—ã—Ç—å",
        "hint": "."
    }
]

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_games = {}
user_stats = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é
def create_game_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    btn2 = types.KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn3 = types.KeyboardButton('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞')
    btn4 = types.KeyboardButton('‚ùå –°–¥–∞—Ç—å—Å—è')
    markup.add(btn1, btn2, btn3, btn4)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
def create_game_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞')
    btn2 = types.KeyboardButton('‚ùå –°–¥–∞—Ç—å—Å—è')
    markup.add(btn1, btn2)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
def start_new_game(user_id):
    user_games[user_id] = {
        'score': 0,
        'current_question': 0,
        'questions': random.sample(quiz_questions, min(5, len(quiz_questions))),  # 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
        'in_game': True,
        'hint_used': False
    }
    return send_question(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
def send_question(user_id):
    game_data = user_games[user_id]
    question_data = game_data['questions'][game_data['current_question']]

    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {game_data['current_question'] + 1} –∏–∑ {len(game_data['questions'])}:\n\n{question_data['question']}"

    if game_data['hint_used']:
        question_text += f"\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"

    return question_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
def check_answer(user_answer, correct_answer):
    # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –æ—Ç–≤–µ—Ç–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    user_clean = user_answer.lower().strip()
    correct_clean = correct_answer.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_clean == correct_clean:
        return True

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —á–∏—Å–µ–ª
    if correct_clean.isdigit() and user_clean.isdigit():
        return user_clean == correct_clean

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if correct_clean in user_clean or user_clean in correct_clean:
        return True

    return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_stats(user_id, score, total_questions):
    if user_id not in user_stats:
        user_stats[user_id] = {
            'games_played': 0,
            'total_correct': 0,
            'total_questions': 0,
            'best_score': 0
        }

    stats = user_stats[user_id]
    stats['games_played'] += 1
    stats['total_correct'] += score
    stats['total_questions'] += total_questions

    if score > stats['best_score']:
        stats['best_score'] = score


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_text(user_id):
    if user_id not in user_stats:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    stats = user_stats[user_id]

    if stats['games_played'] == 0:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    accuracy = (stats['total_correct'] / stats['total_questions']) * 100 if stats['total_questions'] > 0 else 0

    stats_text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {stats['games_played']}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_correct']} –∏–∑ {stats['total_questions']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}/5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""

    return stats_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—É!

–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤. –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∞ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
‚ùå –ú–æ–∂–Ω–æ —Å–¥–∞—Ç—å—Å—è –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

–£–¥–∞—á–∏! üçÄ"""
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_game_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /game
@bot.message_handler(commands=['game'])
def start_game_command(message):
    user_id = message.from_user.id
    start_new_game(user_id)
    question_text = send_question(user_id)
    bot.send_message(message.chat.id, "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–≤–æ–¥–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=create_game_keyboard())
    bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def show_stats_command(message):
    user_id = message.from_user.id
    stats_text = get_stats_text(user_id)
    bot.send_message(message.chat.id, stats_text, reply_markup=create_game_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_game(message):
    user_id = message.from_user.id

    if message.text == 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
        start_new_game(user_id)
        question_text = send_question(user_id)
        bot.send_message(message.chat.id, "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–≤–æ–¥–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=create_game_keyboard())
        bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())

    elif message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats_text = get_stats_text(user_id)
        bot.send_message(message.chat.id, stats_text, reply_markup=create_game_menu())

    elif message.text == 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            if not game_data['hint_used']:
                game_data['hint_used'] = True
                question_data = game_data['questions'][game_data['current_question']]
                hint_text = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"
                bot.send_message(message.chat.id, hint_text, reply_markup=create_game_keyboard())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!",
                                 reply_markup=create_game_keyboard())
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É!", reply_markup=create_game_menu())

    elif message.text == '‚ùå –°–¥–∞—Ç—å—Å—è':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            correct_answer = game_data['questions'][game_data['current_question']]['correct']

            bot.send_message(message.chat.id, f"üòî –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {correct_answer}",
                             reply_markup=create_game_keyboard())

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            game_data['current_question'] += 1
            game_data['hint_used'] = False

            if game_data['current_question'] < len(game_data['questions']):
                question_text = send_question(user_id)
                bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
            else:
                # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                score = game_data['score']
                total = len(game_data['questions'])
                update_stats(user_id, score, total)

                result_text = f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}"
                bot.send_message(message.chat.id, result_text, reply_markup=create_game_menu())
                del user_games[user_id]
        else:
            bot.send_message(message.chat.id, "üëã –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'",
                             reply_markup=create_game_menu())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ)
    elif user_id in user_games and user_games[user_id]['in_game']:
        game_data = user_games[user_id]
        current_question = game_data['questions'][game_data['current_question']]

        if check_answer(message.text, current_question['correct']):
            game_data['score'] += 1
            bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", reply_markup=create_game_keyboard())
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['correct']}",
                             reply_markup=create_game_keyboard())

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        game_data['current_question'] += 1
        game_data['hint_used'] = False

        if game_data['current_question'] < len(game_data['questions']):
            question_text = send_question(user_id)
            bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
        else:
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            score = game_data['score']
            total = len(game_data['questions'])
            update_stats(user_id, score, total)

            if score == total:
                result_text = f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ {total} –≤–æ–ø—Ä–æ—Å–æ–≤! –¢—ã –≥–µ–Ω–∏–π! üåü"
            elif score >= total / 2:
                result_text = f"üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
            else:
                result_text = f"üòä –ù–µ–ø–ª–æ—Ö–æ! {score} –∏–∑ {total}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"

            bot.send_message(message.chat.id, result_text, reply_markup=create_game_menu())
            del user_games[user_id]

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∏–≥—Ä–µ
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_game_menu())


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)