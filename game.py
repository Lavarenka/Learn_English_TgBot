import telebot
from telebot import types
import random
from key import BOT_TOKEN
import questions

bot = telebot.TeleBot(BOT_TOKEN)

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
DIFFICULTY_LEVELS = {
    'beginner': {
        'name': 'üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π',
        'file': 'beginner.txt',
        'description': '–ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –∏ –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã'
    },
    'intermediate': {
        'name': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        'file': 'intermediate.txt',
        'description': '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è'
    },
    'advanced': {
        'name': 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'file': 'advanced.txt',
        'description': '–°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∏–¥–∏–æ–º—ã'
    },
    'mixed': {
        'name': 'üåà –°–º–µ—à–∞–Ω–Ω—ã–π',
        'file': None,
        'description': '–°–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'
    }
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_games = {}
user_stats = {}
user_settings = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    btn2 = types.KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn3 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn1, btn2, btn3)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def create_settings_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤')
    btn2 = types.KeyboardButton('üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
    btn3 = types.KeyboardButton('üìù –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn4 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def create_difficulty_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for level_key, level_info in DIFFICULTY_LEVELS.items():
        markup.add(types.KeyboardButton(level_info['name']))
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def create_questions_count_menu():
    markup = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    counts = [5, 10, 15, 20, 25, 30, 40, 50]
    buttons = [types.KeyboardButton(f'{count}') for count in counts]

    for i in range(0, len(buttons), 4):
        markup.add(*buttons[i:i + 4])

    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_game_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞')
    btn2 = types.KeyboardButton('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn3 = types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É')
    markup.add(btn1, btn2, btn3)
    return markup


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        user_settings[user_id] = {
            'questions_count': 10,
            'difficulty': 'beginner'
        }
    return user_settings[user_id]


def get_user_questions_count(user_id):
    return get_user_settings(user_id)['questions_count']


def get_user_difficulty(user_id):
    return get_user_settings(user_id)['difficulty']


def set_user_questions_count(user_id, count):
    user_settings[user_id]['questions_count'] = count


def set_user_difficulty(user_id, difficulty):
    user_settings[user_id]['difficulty'] = difficulty


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def load_questions_by_difficulty(difficulty):
    level_info = DIFFICULTY_LEVELS.get(difficulty, DIFFICULTY_LEVELS['beginner'])

    if difficulty == 'mixed':
        # –î–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        all_questions = []
        for level_key, level_data in DIFFICULTY_LEVELS.items():
            if level_key != 'mixed' and level_data['file']:
                questions_list = questions.parse_questions_from_file(level_data['file'])
                all_questions.extend(questions_list)
        return all_questions
    else:
        # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if level_info['file']:
            return questions.parse_questions_from_file(level_info['file'])

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π
    return questions.parse_questions_from_file('base.txt')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
def start_new_game(user_id):
    settings = get_user_settings(user_id)
    questions_count = settings['questions_count']
    difficulty = settings['difficulty']

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_questions = load_questions_by_difficulty(difficulty)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    available_questions = min(questions_count, len(difficulty_questions))

    if available_questions == 0:
        return None, "‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"

    user_games[user_id] = {
        'score': 0,
        'current_question': 0,
        'questions': random.sample(difficulty_questions, available_questions),
        'in_game': True,
        'hint_used': False,
        'questions_count': available_questions,
        'difficulty': difficulty
    }

    return send_question(user_id), None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
def send_question(user_id):
    game_data = user_games[user_id]
    question_data = game_data['questions'][game_data['current_question']]

    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {game_data['current_question'] + 1} –∏–∑ {game_data['questions_count']}:\n\n{question_data['question']}"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if len(question_data['correct']) > 1:
        question_text += f"\n\nüí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question_data['correct'])}"

    if game_data['hint_used']:
        question_text += f"\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"

    return question_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
def check_answer(user_answer, correct_answers):
    user_clean = user_answer.lower().strip()

    for correct in correct_answers:
        correct_clean = correct.lower().strip()
        if user_clean == correct_clean:
            return True
        if correct_clean in user_clean or user_clean in correct_clean:
            return True

    return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def format_correct_answers(correct_answers):
    if len(correct_answers) == 1:
        return correct_answers[0]
    else:
        return " –∏–ª–∏ ".join(correct_answers)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_stats(user_id, score, total_questions):
    if user_id not in user_stats:
        user_stats[user_id] = {
            'games_played': 0,
            'total_correct': 0,
            'total_questions': 0,
            'best_score': 0
        }

    stats = user_stats[user_id]
    stats['games_played'] += 1
    stats['total_correct'] += score
    stats['total_questions'] += total_questions

    if score > stats['best_score']:
        stats['best_score'] = score


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_text(user_id):
    if user_id not in user_stats:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    stats = user_stats[user_id]
    if stats['games_played'] == 0:
        return "üìä –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"

    accuracy = (stats['total_correct'] / stats['total_questions']) * 100 if stats['total_questions'] > 0 else 0
    questions_count = get_user_questions_count(user_id)
    difficulty = get_user_difficulty(user_id)
    difficulty_name = DIFFICULTY_LEVELS.get(difficulty, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    stats_text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {stats['games_played']}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_correct']} –∏–∑ {stats['total_questions']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}/{questions_count}
üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {difficulty_name}"""

    return stats_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings_text(user_id):
    settings = get_user_settings(user_id)
    questions_count = settings['questions_count']
    difficulty = settings['difficulty']
    difficulty_info = DIFFICULTY_LEVELS.get(difficulty, DIFFICULTY_LEVELS['beginner'])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    current_questions = load_questions_by_difficulty(difficulty)

    settings_text = f"""‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}
üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_info['name']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {difficulty_info['description']}
üìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: {len(current_questions)}"""

    return settings_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
def finish_game(user_id, message_chat_id):
    if user_id in user_games:
        game_data = user_games[user_id]
        score = game_data['score']
        total = game_data['questions_count']
        difficulty = game_data['difficulty']
        difficulty_name = DIFFICULTY_LEVELS.get(difficulty, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if game_data['current_question'] > 0:
            update_stats(user_id, score, total)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç–∞
        if score == total:
            result_text = f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–∞ —É—Ä–æ–≤–Ω–µ {difficulty_name} –≤—Å–µ {total} –æ—Ç–≤–µ—Ç–æ–≤ –≤–µ—Ä–Ω—ã! üåü"
        elif score >= total * 0.7:
            result_text = f"üëç –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! {score} –∏–∑ {total} –Ω–∞ —É—Ä–æ–≤–Ω–µ {difficulty_name}"
        elif score >= total * 0.5:
            result_text = f"üëå –•–æ—Ä–æ—à–æ! {score} –∏–∑ {total} –Ω–∞ —É—Ä–æ–≤–Ω–µ {difficulty_name}"
        else:
            result_text = f"üí™ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ! {score} –∏–∑ {total} –Ω–∞ —É—Ä–æ–≤–Ω–µ {difficulty_name}"

        bot.send_message(message_chat_id, result_text, reply_markup=create_main_menu())
        del user_games[user_id]
    else:
        bot.send_message(message_chat_id, "üëã –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=create_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)
    difficulty_info = DIFFICULTY_LEVELS.get(settings['difficulty'], DIFFICULTY_LEVELS['beginner'])
    current_questions = load_questions_by_difficulty(settings['difficulty'])

    welcome_text = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–≥–ª–∏–π—Å–∫—É—é –í–∏–∫—Ç–æ—Ä–∏–Ω—É!

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üéØ –£—Ä–æ–≤–µ–Ω—å: {difficulty_info['name']}
üî¢ –í–æ–ø—Ä–æ—Å–æ–≤: {settings['questions_count']}
üìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: {len(current_questions)}

{difficulty_info['description']}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã! üçÄ"""

    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())


@bot.message_handler(commands=['game'])
def start_game_command(message):
    user_id = message.from_user.id
    question_text, error = start_new_game(user_id)

    if error:
        bot.send_message(message.chat.id, error, reply_markup=create_main_menu())
    else:
        settings = get_user_settings(user_id)
        difficulty_info = DIFFICULTY_LEVELS.get(settings['difficulty'], DIFFICULTY_LEVELS['beginner'])

        bot.send_message(message.chat.id,
                         f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Ä–æ–≤–µ–Ω—å: {difficulty_info['name']}\n–í–æ–ø—Ä–æ—Å–æ–≤: {settings['questions_count']}\n\n–í–≤–æ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥:",
                         reply_markup=create_game_keyboard())
        bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())


@bot.message_handler(commands=['stats'])
def show_stats_command(message):
    user_id = message.from_user.id
    stats_text = get_stats_text(user_id)
    bot.send_message(message.chat.id, stats_text, reply_markup=create_main_menu())


@bot.message_handler(commands=['settings'])
def show_settings_command(message):
    user_id = message.from_user.id
    settings_text = get_settings_text(user_id)
    bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_game(message):
    user_id = message.from_user.id

    if message.text == 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
        question_text, error = start_new_game(user_id)

        if error:
            bot.send_message(message.chat.id, error, reply_markup=create_main_menu())
        else:
            settings = get_user_settings(user_id)
            difficulty_info = DIFFICULTY_LEVELS.get(settings['difficulty'], DIFFICULTY_LEVELS['beginner'])

            bot.send_message(message.chat.id,
                             f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Ä–æ–≤–µ–Ω—å: {difficulty_info['name']}\n–í–æ–ø—Ä–æ—Å–æ–≤: {settings['questions_count']}\n\n–í–≤–æ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥:",
                             reply_markup=create_game_keyboard())
            bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())

    elif message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats_text = get_stats_text(user_id)
        bot.send_message(message.chat.id, stats_text, reply_markup=create_main_menu())

    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings_text = get_settings_text(user_id)
        bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())

    elif message.text == 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤':
        total_available = len(load_questions_by_difficulty(get_user_difficulty(user_id)))
        max_questions = min(50, total_available)
        text = f"üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (5-{max_questions}):\n\n–î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: {total_available}"
        bot.send_message(message.chat.id, text, reply_markup=create_questions_count_menu())

    elif message.text == 'üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏':
        text = "üéØ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
        for level_key, level_info in DIFFICULTY_LEVELS.items():
            questions_count = len(load_questions_by_difficulty(level_key))
            text += f"{level_info['name']} - {level_info['description']} ({questions_count} —Å–ª–æ–≤)\n"
        bot.send_message(message.chat.id, text, reply_markup=create_difficulty_menu())

    elif message.text == 'üìù –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings_text = get_settings_text(user_id)
        bot.send_message(message.chat.id, settings_text, reply_markup=create_settings_menu())

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    elif message.text.isdigit():
        count = int(message.text)
        total_available = len(load_questions_by_difficulty(get_user_difficulty(user_id)))
        max_questions = min(50, total_available)

        if count < 5:
            bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=create_questions_count_menu())
        elif count > max_questions:
            bot.send_message(message.chat.id,
                             f"‚ùå –ú–∞–∫—Å–∏–º—É–º {max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤\n–í –±–∞–∑–µ —Ç–æ–ª—å–∫–æ {total_available} —Å–ª–æ–≤",
                             reply_markup=create_questions_count_menu())
        else:
            set_user_questions_count(user_id, count)
            bot.send_message(message.chat.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count} –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=create_settings_menu())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    elif message.text in [level['name'] for level in DIFFICULTY_LEVELS.values()]:
        for level_key, level_info in DIFFICULTY_LEVELS.items():
            if message.text == level_info['name']:
                set_user_difficulty(user_id, level_key)
                questions_list = load_questions_by_difficulty(level_key)
                bot.send_message(message.chat.id,
                                 f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {level_info['name']}\nüìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: {len(questions_list)}",
                                 reply_markup=create_settings_menu())
                break

    elif message.text == 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            if not game_data['hint_used']:
                game_data['hint_used'] = True
                question_data = game_data['questions'][game_data['current_question']]
                hint_text = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {question_data['hint']}"
                bot.send_message(message.chat.id, hint_text, reply_markup=create_game_keyboard())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!", reply_markup=create_game_keyboard())
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É!", reply_markup=create_main_menu())

    elif message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if user_id in user_games and user_games[user_id]['in_game']:
            game_data = user_games[user_id]
            question_data = game_data['questions'][game_data['current_question']]
            correct_text = format_correct_answers(question_data['correct'])

            bot.send_message(message.chat.id, f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}",
                             reply_markup=create_game_keyboard())

            game_data['current_question'] += 1
            game_data['hint_used'] = False

            if game_data['current_question'] < game_data['questions_count']:
                question_text = send_question(user_id)
                bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
            else:
                finish_game(user_id, message.chat.id)

    elif message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É':
        if user_id in user_games and user_games[user_id]['in_game']:
            bot.send_message(message.chat.id, "üõë –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=create_main_menu())
            finish_game(user_id, message.chat.id)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", reply_markup=create_main_menu())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_games and user_games[user_id]['in_game']:
        game_data = user_games[user_id]
        current_question = game_data['questions'][game_data['current_question']]

        if check_answer(message.text, current_question['correct']):
            game_data['score'] += 1
            bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", reply_markup=create_game_keyboard())
        else:
            correct_text = format_correct_answers(current_question['correct'])
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}",
                             reply_markup=create_game_keyboard())

        game_data['current_question'] += 1
        game_data['hint_used'] = False

        if game_data['current_question'] < game_data['questions_count']:
            question_text = send_question(user_id)
            bot.send_message(message.chat.id, question_text, reply_markup=create_game_keyboard())
        else:
            finish_game(user_id, message.chat.id)

    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=create_main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!")
    bot.polling(none_stop=True)